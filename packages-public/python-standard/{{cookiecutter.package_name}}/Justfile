NAME:='{{cookiecutter.package_name}}'
DEV_IMAGE:='ghcr.io/iomorphic/image/dev-py:latest'
SRC_FOLDER:='src'
TEST_FOLDER:='tests'


{% raw %}
@default:
    just --list

@init:
    [ -f uv.lock ] && echo "Lockfile already exists" || just lock
    just sync

lock UPGRADE="noupgrade" PACKAGE="":
    #!/usr/bin/env bash
    if [ "{{UPGRADE}}" = "--upgrade" ] && [ -n "{{PACKAGE}}" ]; then
        uv lock --upgrade-package "{{PACKAGE}}"
    elif [ "{{UPGRADE}}" = "--upgrade" ] || [ "{{UPGRADE}}" = "-U" ]; then
        uv lock --upgrade
    else
        uv lock
    fi

sync FORCE="noforce":
    #!/usr/bin/env bash
    if [ "{{FORCE}}" = "--force" ]  || [ "{{FORCE}}" = "-f" ]; then
        rm -rf {{justfile_directory()}}/.venv
    fi
    uv sync --all-extras --frozen

@build:
    uv build

@verify: lint typecheck test
    echo "Done with Verification"

@lint:
    uv run --frozen ruff check {{SRC_FOLDER}} {{TEST_FOLDER}}
    uv run --frozen ruff format --check {{SRC_FOLDER}} {{TEST_FOLDER}}

@typecheck:
    uv run --frozen mypy --explicit-package-bases -p {{NAME}}
    uv run --frozen mypy --allow-untyped-defs tests

@test:
    uv run --frozen pytest --hypothesis-show-statistics {{TEST_FOLDER}}

@format:
    uv run --frozen ruff check --fix-only {{SRC_FOLDER}} {{TEST_FOLDER}}
    uv run --frozen ruff format {{SRC_FOLDER}} {{TEST_FOLDER}}

@stats:
    uv run --frozen coverage run -m pytest {{TEST_FOLDER}}
    uv run --frozen coverage report -m
    scc --by-file --include-ext py

@cicd-pr: init verify
    echo "PR is successful!"

@cicd-register:
    git diff --name-only HEAD^1 HEAD -G"^version" "pyproject.toml" | uniq | xargs -I {} sh -c 'just _register'

@_register: init build
    uv publish -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

@repl:
    uv run --frozen python

@shell:
    #!/usr/bin/env bash
    pipenv shell

@run +COMMAND:
    uv run --frozen {{COMMAND}}
{% endraw %}
######
## Custom Section Begin
######

######
## Custom Section End
######
